{"version":3,"sources":["component/card/card-list.jsx","component/card/card.jsx","component/search/search.jsx","App.js","serviceWorker.js","index.js"],"names":["cardList","user","name","email","phone","username","website","id","className","style","textAlign","src","alt","width","height","target","href","card","users","length","map","index","key","search","placholder","handlerChange","type","placeholder","onChange","App","props","state","fetch","then","response","json","setState","this","filterUser","filter","toLowerCase","includes","color","fontSize","value","e","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAGe,SAASA,EAAT,GAA2B,IAARC,EAAO,EAAPA,KACvBC,EAA2CD,EAA3CC,KAAMC,EAAqCF,EAArCE,MAAgBC,GAAqBH,EAA/BI,SAA+BJ,EAArBG,OAAOE,EAAcL,EAAdK,QAAQC,EAAMN,EAANM,GAC5C,OACI,yBAAKC,UAAU,aACb,yBAAKC,MAAO,CAACC,UAAW,WAAxB,KAAqC,yBAAKC,IAAG,qCAAgCJ,EAAhC,gBAAkDK,IAAKL,EAAIE,MAAO,CAACI,MAAO,QAASC,OAAQ,WAAxI,KACE,4BAAKZ,GACJC,EAHL,IAGY,6BAAUC,EAAM,6BACxB,uBAAGW,OAAO,SAASC,KAAMV,GAAUA,ICN/C,IAaeW,EAbF,SAAC,GAAc,IAAbC,EAAY,EAAZA,MACX,OACQ,yBAAKV,UAAU,aACdU,GAASA,EAAMC,OAAS,GAAKD,EAAME,KAAI,SAACnB,EAAMoB,GAC3C,OAAO,kBAAC,EAAD,CAAUC,IAAKrB,EAAKM,GAAIN,KAAMA,S,sBCJtC,SAASsB,EAAT,GAAgD,IAA/BC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,cACxC,OACI,2BAAOC,KAAK,OAAQC,YAAaH,EAAYI,SAAUH,I,UC0ChDI,E,YAzCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXb,MAAO,GACPK,OAAQ,IAJO,E,iFASE,IAAD,OAClBS,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAf,GAAK,OAAI,EAAKkB,SAAS,CAAElB,MAAOA,S,+BAIhC,IAAD,SACmBmB,KAAKN,MAAvBb,EADD,EACCA,MAAOK,EADR,EACQA,OACTe,EAAapB,EAAMqB,QAAO,SAAAtC,GAC9B,OAAOA,EAAKC,KAAKsC,cAAcC,SAASlB,EAAOiB,kBAGjD,OACE,6BACE,wBAAI/B,MAAO,CAACiC,MAAO,OAAQC,SAAU,MAAOjC,UAAW,WAAvD,kBAEA,yBAAKD,MAAO,CAAEC,UAAW,WACvB,kBAAC,EAAD,CAAOgB,KAAK,OAAOkB,MAAOP,KAAKN,MAAMR,OAAQC,WAAW,aAAaC,cAAe,SAAAoB,GAAC,OAAI,EAAKT,SAAS,CAAEb,OAAQsB,EAAE9B,OAAO6B,YAE5H,6BACA,6BACA,kBAAC,EAAD,CAAM1B,MAAOoB,IAEZA,GAAcA,EAAWnB,QAAU,GAChC,wBAAIV,MAAO,CAACC,UAAW,WAAvB,uB,GAnCMoC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.05526f2b.chunk.js","sourcesContent":["import React from 'react';\nimport './card-style.css';\n\nexport default function cardList({user}) {\n    const {name, email,username, phone, website,id} = user;\n    return (\n        <div className=\"user-card\">\n          <div style={{textAlign: \"Center\"}}>  <img src={`https://i.picsum.photos/id/${id}/200/300.jpg`} alt={id} style={{width: '100px', height: '100px',}}/> </div>\n            <h1>{name}</h1>\n            {email} <br></br>{phone}<br></br>\n            <a target=\"_blank\" href={website}>{website}</a>\n        </div>\n    )\n}\n\n\n","import React from 'react';\nimport CardList from './card-list';\nimport './card-style.css'\n\nconst card = ({users}) =>  {\n    return (\n            <div className=\"user-flex\">\n            {users && users.length > 0 && users.map((user, index) => {\n                return <CardList key={user.id} user={user} />\n            })}\n           \n            </div>\n            \n    )\n}\n\n\nexport default card;\n","import React from 'react';\nimport './search-style.css';\n\n\nexport default function search({placholder, handlerChange, }) {\n    return (\n        <input type=\"text\"  placeholder={placholder} onChange={handlerChange} />\n    )\n}\n","import React, { Component } from 'react';\nimport Card from './component/card/card';\nimport Table from './component/table/table';\nimport Input from './component/search/search';\nimport './app.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n      search: \"\"\n\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ users: users }));\n\n  }\n\n  render() {\n    const { users, search } = this.state;\n    const filterUser = users.filter(user => {\n      return user.name.toLowerCase().includes(search.toLowerCase())\n    })\n\n    return (   \n      <div>\n        <h1 style={{color: \"#fff\", fontSize: \"5vw\", textAlign: \"center\"}}>MONSTER ROLDEX</h1>\n        {/* <Table /> */}\n        <div style={{ textAlign: 'center' }}>\n          <Input type=\"text\" value={this.state.search} placholder=\"Enter Name\" handlerChange={e => this.setState({ search: e.target.value })} />\n        </div>\n        <br></br>\n        <br></br>\n        <Card users={filterUser}></Card>\n\n        {filterUser && filterUser.length <= 0 && \n            <h3 style={{textAlign: \"Center\"}}>User Not Found</h3>}\n\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}